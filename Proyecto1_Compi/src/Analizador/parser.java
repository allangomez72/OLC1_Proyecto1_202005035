
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Errores.Exception_;
import Metodos.OperacionesAritmeticas;
import Metodos.Mapas;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\014\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\010\000\002\010\010\000\002\010\010\000\002\010\010" +
    "\000\002\010\010\000\002\011\012\000\002\012\005\000" +
    "\002\012\003\000\002\013\017\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\003\000\002\016" +
    "\014\000\002\017\004\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\003\004\004\007\001\002\000\004\005" +
    "\134\001\002\000\004\002\000\001\002\000\004\002\133" +
    "\001\002\000\010\006\011\007\015\013\016\001\002\000" +
    "\012\005\ufffb\006\ufffb\007\ufffb\013\ufffb\001\002\000\004" +
    "\044\122\001\002\000\012\005\ufffc\006\ufffc\007\ufffc\013" +
    "\ufffc\001\002\000\012\005\ufffa\006\ufffa\007\ufffa\013\ufffa" +
    "\001\002\000\012\005\120\006\011\007\015\013\016\001" +
    "\002\000\004\044\105\001\002\000\004\044\020\001\002" +
    "\000\012\005\ufff9\006\ufff9\007\ufff9\013\ufff9\001\002\000" +
    "\006\011\023\012\021\001\002\000\006\044\ufff6\047\ufff6" +
    "\001\002\000\004\044\027\001\002\000\006\044\ufff7\047" +
    "\ufff7\001\002\000\006\044\uffe8\047\025\001\002\000\004" +
    "\050\026\001\002\000\004\044\uffe9\001\002\000\004\044" +
    "\030\001\002\000\004\051\031\001\002\000\004\057\032" +
    "\001\002\000\004\046\033\001\002\000\004\047\034\001" +
    "\002\000\022\014\037\015\046\016\041\017\044\020\043" +
    "\056\036\057\042\060\035\001\002\000\012\005\ufff3\050" +
    "\ufff3\053\ufff3\054\ufff3\001\002\000\012\005\ufff5\050\ufff5" +
    "\053\ufff5\054\ufff5\001\002\000\004\052\100\001\002\000" +
    "\004\050\075\001\002\000\004\052\070\001\002\000\012" +
    "\005\ufff4\050\ufff4\053\ufff4\054\ufff4\001\002\000\004\052" +
    "\063\001\002\000\004\052\056\001\002\000\006\050\uffe6" +
    "\054\054\001\002\000\004\052\047\001\002\000\022\014" +
    "\037\015\046\016\041\017\044\020\043\056\036\057\042" +
    "\060\035\001\002\000\004\054\051\001\002\000\022\014" +
    "\037\015\046\016\041\017\044\020\043\056\036\057\042" +
    "\060\035\001\002\000\004\053\053\001\002\000\012\005" +
    "\ufff1\050\ufff1\053\ufff1\054\ufff1\001\002\000\022\014\037" +
    "\015\046\016\041\017\044\020\043\056\036\057\042\060" +
    "\035\001\002\000\004\050\uffe7\001\002\000\022\014\037" +
    "\015\046\016\041\017\044\020\043\056\036\057\042\060" +
    "\035\001\002\000\004\054\060\001\002\000\022\014\037" +
    "\015\046\016\041\017\044\020\043\056\036\057\042\060" +
    "\035\001\002\000\004\053\062\001\002\000\012\005\uffef" +
    "\050\uffef\053\uffef\054\uffef\001\002\000\022\014\037\015" +
    "\046\016\041\017\044\020\043\056\036\057\042\060\035" +
    "\001\002\000\004\054\065\001\002\000\022\014\037\015" +
    "\046\016\041\017\044\020\043\056\036\057\042\060\035" +
    "\001\002\000\004\053\067\001\002\000\012\005\uffee\050" +
    "\uffee\053\uffee\054\uffee\001\002\000\022\014\037\015\046" +
    "\016\041\017\044\020\043\056\036\057\042\060\035\001" +
    "\002\000\004\054\072\001\002\000\022\014\037\015\046" +
    "\016\041\017\044\020\043\056\036\057\042\060\035\001" +
    "\002\000\004\053\074\001\002\000\012\005\ufff0\050\ufff0" +
    "\053\ufff0\054\ufff0\001\002\000\004\005\076\001\002\000" +
    "\004\045\077\001\002\000\012\005\uffea\006\uffea\007\uffea" +
    "\013\uffea\001\002\000\022\014\037\015\046\016\041\017" +
    "\044\020\043\056\036\057\042\060\035\001\002\000\004" +
    "\054\102\001\002\000\022\014\037\015\046\016\041\017" +
    "\044\020\043\056\036\057\042\060\035\001\002\000\004" +
    "\053\104\001\002\000\012\005\ufff2\050\ufff2\053\ufff2\054" +
    "\ufff2\001\002\000\004\044\106\001\002\000\004\010\107" +
    "\001\002\000\004\055\110\001\002\000\022\014\037\015" +
    "\046\016\041\017\044\020\043\056\036\057\042\060\035" +
    "\001\002\000\004\005\115\001\002\000\006\005\uffeb\054" +
    "\113\001\002\000\022\014\037\015\046\016\041\017\044" +
    "\020\043\056\036\057\042\060\035\001\002\000\004\005" +
    "\uffec\001\002\000\004\045\116\001\002\000\012\005\uffed" +
    "\006\uffed\007\uffed\013\uffed\001\002\000\012\005\ufffd\006" +
    "\ufffd\007\ufffd\013\ufffd\001\002\000\004\004\121\001\002" +
    "\000\004\002\uffff\001\002\000\006\011\023\012\021\001" +
    "\002\000\004\044\124\001\002\000\004\044\125\001\002" +
    "\000\004\057\126\001\002\000\004\046\127\001\002\000" +
    "\022\014\037\015\046\016\041\017\044\020\043\056\036" +
    "\057\042\060\035\001\002\000\004\005\131\001\002\000" +
    "\004\045\132\001\002\000\012\005\ufff8\006\ufff8\007\ufff8" +
    "\013\ufff8\001\002\000\004\002\001\001\002\000\004\004" +
    "\135\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\013" +
    "\005\011\006\007\011\012\013\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\116\006\007\011\012\013\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\023\014\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\044\015\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\047\001\001" +
    "\000\002\001\001\000\004\010\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\044\015\054\001\001" +
    "\000\002\001\001\000\004\010\056\001\001\000\002\001" +
    "\001\000\004\010\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\063\001\001\000\002\001\001\000" +
    "\004\010\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\070\001\001\000\002\001\001\000\004\010" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\100\001\001\000\002\001\001\000\004\010\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\111\012\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\111\012\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //lista de errores
    public ArrayList<Exception_> Errores = new ArrayList();
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        Errores.add(new Exception_("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocidoo."); 
    }

    public ArrayList<Exception_> getErrores(){
        return Errores;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= PROGRAM INSTRUCTION END PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= error END PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= INSTRUCTION SENTENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= SENTENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCE ::= STATEMENT_VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCE ::= STATEMENT_PRINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE ::= ARREGLO_DECLARATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT_VARIABLES ::= VAR DOSPUNTOS TYPE DOSPUNTOS DOSPUNTOS ID FLECHA EXPRESSION END PUNTOCOMA 
            {
              Object RESULT =null;
		int itentifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int itentifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String itentifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int value_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int value_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Mapas.setVariable(itentifier.toString(), value_);
                System.out.println("Variable declarada: " + itentifier + " con valor: " + value_);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE ::= CHAR 
            {
              Object RESULT =null;
		
                System.out.println("Tipo de dato char");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= DOUBLE 
            {
              Object RESULT =null;
		
                System.out.println("Tipo de dato double");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESSION ::= DECIMAL 
            {
              Object RESULT =null;
		int decileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deci = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = deci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESSION ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Object auxMapa = null;
                auxMapa = Mapas.getVariable(id.toString()); 
                if (auxMapa != null) {
                        RESULT = auxMapa; 
                } else {
                        System.out.println("Variable no declarada");
                }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESSION ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cad; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESSION ::= SUMA PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Suma: " + operacion.suma(primero, segundo));
                RESULT = operacion.suma(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESSION ::= RESTA PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Resta: " + operacion.resta(primero, segundo));
                RESULT = operacion.resta(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESSION ::= MULTIPLICACION PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Multiplicación: " + operacion.multiplicacion(primero, segundo));
                RESULT = operacion.multiplicacion(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESSION ::= DIVISION PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("División: " + operacion.division(primero, segundo));
                RESULT = operacion.division(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESSION ::= MODULO PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Módulo: " + operacion.modulo(primero, segundo));
                RESULT = operacion.modulo(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT_PRINT ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL CONCATENATION END PUNTOCOMA 
            {
              Object RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object concat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                System.out.println("Imprimir: " + concat);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_PRINT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONCATENATION ::= EXPRESSION COMA CONCATENATION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int concaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int concaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object conca = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = exp + " " + conca;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONCATENATION ::= EXPRESSION 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ex.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARREGLO_DECLARATION ::= ARREGLO DOSPUNTOS ARREGLO_TYPE DOSPUNTOS DOSPUNTOS ARROBA ID FLECHA CORABRE LIST_VALUES CORCIERRA END PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            Mapas.setArreglo(id.toString(),(ArrayList<Object>) list);
            System.out.println("Arreglo declarado: " + id + " con valores: " + list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO_DECLARATION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARREGLO_TYPE ::= TYPE CORABRE CORCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO_TYPE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARREGLO_TYPE ::= TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO_TYPE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIST_VALUES ::= EXPRESSION COMA LIST_VALUES 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //con esto me aseguro que todo sea de tipo Objetct y no haya problema luego
            ArrayList<Object> newList = new ArrayList<>();
            newList.addAll((ArrayList<Object>)list); // Copiamos la lista actual
            newList.add(expr); // Agregamos el nuevo elemento
            RESULT = newList; // Asignamos la nueva lista como resultado
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VALUES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIST_VALUES ::= EXPRESSION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Object> newList = new ArrayList<>();
            newList.add(exp); // Creamos una nueva lista con el único elemento
            RESULT = newList; // Asignamos la nueva lista como resultado
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VALUES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRINT_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXPRESSION FLECHA TYPE_PRINT_ARRAY END PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                // Castear TYPE_PRINT_ARRAY a un arreglo
                Object[] expArray = (Object[]) array;
                System.out.println("Imprimir arreglo: " + array);
                System.out.println("--------------");
                System.out.println(exp.toString());
                System.out.println("--------------");
                // Imprimir cada elemento del array en una nueva línea
                for (int i = 0; i < expArray.length; i++) {
                 System.out.println(expArray[i]);
                }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT_ARRAY",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPE_PRINT_ARRAY ::= ARROBA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = Mapas.getArreglo(id.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_PRINT_ARRAY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPE_PRINT_ARRAY ::= LIST_VALUES 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_PRINT_ARRAY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
