
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import Errores.Exception_;
import Metodos.OperacionesAritmeticas;
import Metodos.Mapas;
import Metodos.OperacionesEstadisticas;
import Metodos.Graficas;
import Metodos.TablaSimbolos;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\014\000\002" +
    "\020\005\000\002\020\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\010\000\002\010\010\000\002\010\010\000" +
    "\002\010\010\000\002\010\010\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\011\012\000\002\012\005" +
    "\000\002\012\003\000\002\013\017\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\016\014\000\002\017\004\000\002\017\005\000\002\025" +
    "\004\000\002\025\003\000\002\021\011\000\002\021\014" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\026\005\000\002\027\010\000\002\030\013" +
    "\000\002\034\013\000\002\031\012\000\002\032\012\000" +
    "\002\033\007\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\003\004\004\007\001\002\000\004\005" +
    "\323\001\002\000\004\002\000\001\002\000\004\002\322" +
    "\001\002\000\014\006\015\007\023\013\021\030\016\043" +
    "\013\001\002\000\016\005\ufff9\006\ufff9\007\ufff9\013\ufff9" +
    "\030\ufff9\043\ufff9\001\002\000\016\005\ufffa\006\ufffa\007" +
    "\ufffa\013\ufffa\030\ufffa\043\ufffa\001\002\000\016\005\ufff8" +
    "\006\ufff8\007\ufff8\013\ufff8\030\ufff8\043\ufff8\001\002\000" +
    "\004\052\311\001\002\000\016\005\ufffb\006\ufffb\007\ufffb" +
    "\013\ufffb\030\ufffb\043\ufffb\001\002\000\004\044\300\001" +
    "\002\000\012\031\174\032\172\033\173\043\175\001\002" +
    "\000\016\005\170\006\015\007\023\013\021\030\016\043" +
    "\013\001\002\000\016\005\ufffc\006\ufffc\007\ufffc\013\ufffc" +
    "\030\ufffc\043\ufffc\001\002\000\004\044\146\001\002\000" +
    "\016\005\ufff7\006\ufff7\007\ufff7\013\ufff7\030\ufff7\043\ufff7" +
    "\001\002\000\004\044\024\001\002\000\004\044\025\001" +
    "\002\000\006\010\027\027\026\001\002\000\004\055\140" +
    "\001\002\000\004\055\030\001\002\000\036\014\034\015" +
    "\047\016\037\017\044\020\043\021\046\022\032\023\041" +
    "\024\036\025\035\026\050\056\033\057\042\060\031\001" +
    "\002\000\014\005\uffef\046\uffef\050\uffef\053\uffef\054\uffef" +
    "\001\002\000\004\052\135\001\002\000\014\005\ufff1\046" +
    "\ufff1\050\ufff1\053\ufff1\054\ufff1\001\002\000\004\052\130" +
    "\001\002\000\004\052\125\001\002\000\004\052\122\001" +
    "\002\000\004\052\115\001\002\000\004\005\113\001\002" +
    "\000\004\052\110\001\002\000\014\005\ufff0\046\ufff0\050" +
    "\ufff0\053\ufff0\054\ufff0\001\002\000\004\052\103\001\002" +
    "\000\004\052\076\001\002\000\006\005\uffe1\054\074\001" +
    "\002\000\004\052\071\001\002\000\004\052\064\001\002" +
    "\000\004\052\051\001\002\000\006\047\053\051\054\001" +
    "\002\000\004\053\063\001\002\000\036\014\034\015\047" +
    "\016\037\017\044\020\043\021\046\022\032\023\041\024" +
    "\036\025\035\026\050\056\033\057\042\060\031\001\002" +
    "\000\004\057\055\001\002\000\006\005\uffda\053\uffda\001" +
    "\002\000\004\050\062\001\002\000\006\050\uffdc\054\060" +
    "\001\002\000\036\014\034\015\047\016\037\017\044\020" +
    "\043\021\046\022\032\023\041\024\036\025\035\026\050" +
    "\056\033\057\042\060\031\001\002\000\004\050\uffdd\001" +
    "\002\000\006\005\uffd9\053\uffd9\001\002\000\014\005\uffe4" +
    "\046\uffe4\050\uffe4\053\uffe4\054\uffe4\001\002\000\036\014" +
    "\034\015\047\016\037\017\044\020\043\021\046\022\032" +
    "\023\041\024\036\025\035\026\050\056\033\057\042\060" +
    "\031\001\002\000\004\054\066\001\002\000\036\014\034" +
    "\015\047\016\037\017\044\020\043\021\046\022\032\023" +
    "\041\024\036\025\035\026\050\056\033\057\042\060\031" +
    "\001\002\000\004\053\070\001\002\000\014\005\uffed\046" +
    "\uffed\050\uffed\053\uffed\054\uffed\001\002\000\006\047\053" +
    "\051\054\001\002\000\004\053\073\001\002\000\014\005" +
    "\uffe9\046\uffe9\050\uffe9\053\uffe9\054\uffe9\001\002\000\036" +
    "\014\034\015\047\016\037\017\044\020\043\021\046\022" +
    "\032\023\041\024\036\025\035\026\050\056\033\057\042" +
    "\060\031\001\002\000\004\005\uffe2\001\002\000\036\014" +
    "\034\015\047\016\037\017\044\020\043\021\046\022\032" +
    "\023\041\024\036\025\035\026\050\056\033\057\042\060" +
    "\031\001\002\000\004\054\100\001\002\000\036\014\034" +
    "\015\047\016\037\017\044\020\043\021\046\022\032\023" +
    "\041\024\036\025\035\026\050\056\033\057\042\060\031" +
    "\001\002\000\004\053\102\001\002\000\014\005\uffeb\046" +
    "\uffeb\050\uffeb\053\uffeb\054\uffeb\001\002\000\036\014\034" +
    "\015\047\016\037\017\044\020\043\021\046\022\032\023" +
    "\041\024\036\025\035\026\050\056\033\057\042\060\031" +
    "\001\002\000\004\054\105\001\002\000\036\014\034\015" +
    "\047\016\037\017\044\020\043\021\046\022\032\023\041" +
    "\024\036\025\035\026\050\056\033\057\042\060\031\001" +
    "\002\000\004\053\107\001\002\000\014\005\uffea\046\uffea" +
    "\050\uffea\053\uffea\054\uffea\001\002\000\006\047\053\051" +
    "\054\001\002\000\004\053\112\001\002\000\014\005\uffe7" +
    "\046\uffe7\050\uffe7\053\uffe7\054\uffe7\001\002\000\004\045" +
    "\114\001\002\000\016\005\uffe3\006\uffe3\007\uffe3\013\uffe3" +
    "\030\uffe3\043\uffe3\001\002\000\036\014\034\015\047\016" +
    "\037\017\044\020\043\021\046\022\032\023\041\024\036" +
    "\025\035\026\050\056\033\057\042\060\031\001\002\000" +
    "\004\054\117\001\002\000\036\014\034\015\047\016\037" +
    "\017\044\020\043\021\046\022\032\023\041\024\036\025" +
    "\035\026\050\056\033\057\042\060\031\001\002\000\004" +
    "\053\121\001\002\000\014\005\uffec\046\uffec\050\uffec\053" +
    "\uffec\054\uffec\001\002\000\006\047\053\051\054\001\002" +
    "\000\004\053\124\001\002\000\014\005\uffe6\046\uffe6\050" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\006\047\053\051\054" +
    "\001\002\000\004\053\127\001\002\000\014\005\uffe5\046" +
    "\uffe5\050\uffe5\053\uffe5\054\uffe5\001\002\000\036\014\034" +
    "\015\047\016\037\017\044\020\043\021\046\022\032\023" +
    "\041\024\036\025\035\026\050\056\033\057\042\060\031" +
    "\001\002\000\004\054\132\001\002\000\036\014\034\015" +
    "\047\016\037\017\044\020\043\021\046\022\032\023\041" +
    "\024\036\025\035\026\050\056\033\057\042\060\031\001" +
    "\002\000\004\053\134\001\002\000\014\005\uffee\046\uffee" +
    "\050\uffee\053\uffee\054\uffee\001\002\000\006\047\053\051" +
    "\054\001\002\000\004\053\137\001\002\000\014\005\uffe8" +
    "\046\uffe8\050\uffe8\053\uffe8\054\uffe8\001\002\000\036\014" +
    "\034\015\047\016\037\017\044\020\043\021\046\022\032" +
    "\023\041\024\036\025\035\026\050\056\033\057\042\060" +
    "\031\001\002\000\004\046\142\001\002\000\006\047\053" +
    "\051\054\001\002\000\004\005\144\001\002\000\004\045" +
    "\145\001\002\000\016\005\uffdb\006\uffdb\007\uffdb\013\uffdb" +
    "\030\uffdb\043\uffdb\001\002\000\006\011\151\012\147\001" +
    "\002\000\010\044\ufff2\047\ufff2\055\ufff2\001\002\000\004" +
    "\044\155\001\002\000\010\044\ufff3\047\ufff3\055\ufff3\001" +
    "\002\000\006\044\uffde\047\153\001\002\000\004\050\154" +
    "\001\002\000\004\044\uffdf\001\002\000\004\044\156\001" +
    "\002\000\004\051\157\001\002\000\004\057\160\001\002" +
    "\000\004\046\161\001\002\000\004\047\162\001\002\000" +
    "\036\014\034\015\047\016\037\017\044\020\043\021\046" +
    "\022\032\023\041\024\036\025\035\026\050\056\033\057" +
    "\042\060\031\001\002\000\004\050\164\001\002\000\004" +
    "\005\165\001\002\000\004\045\166\001\002\000\016\005" +
    "\uffe0\006\uffe0\007\uffe0\013\uffe0\030\uffe0\043\uffe0\001\002" +
    "\000\016\005\ufffd\006\ufffd\007\ufffd\013\ufffd\030\ufffd\043" +
    "\ufffd\001\002\000\004\004\171\001\002\000\004\002\uffff" +
    "\001\002\000\006\005\uffd3\052\uffd3\001\002\000\006\005" +
    "\uffd2\052\uffd2\001\002\000\006\005\uffd4\052\uffd4\001\002" +
    "\000\006\005\uffd1\052\uffd1\001\002\000\004\052\177\001" +
    "\002\000\014\034\203\035\202\036\207\037\213\040\204" +
    "\001\002\000\016\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\053\uffcb\001\002\000\016\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\053\uffcf\001\002\000\010\041\247\042" +
    "\246\044\263\001\002\000\004\030\257\001\002\000\006" +
    "\041\247\042\246\001\002\000\016\034\203\035\202\036" +
    "\207\037\213\040\204\053\241\001\002\000\016\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\053\uffcd\001\002\000" +
    "\004\044\232\001\002\000\016\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\053\uffcc\001\002\000\016\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\053\uffce\001\002\000\016" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\053\uffd0\001" +
    "\002\000\004\044\220\001\002\000\004\005\216\001\002" +
    "\000\016\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\053" +
    "\uffd7\001\002\000\004\045\217\001\002\000\016\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\053\uffca\001\002\000" +
    "\004\044\221\001\002\000\006\011\151\012\147\001\002" +
    "\000\004\055\226\001\002\000\010\044\ufff4\047\224\055" +
    "\ufff4\001\002\000\004\050\225\001\002\000\006\044\ufff5" +
    "\055\ufff5\001\002\000\006\047\053\051\054\001\002\000" +
    "\004\005\230\001\002\000\004\045\231\001\002\000\016" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\053\uffc5\001" +
    "\002\000\004\044\233\001\002\000\006\011\151\012\147" +
    "\001\002\000\004\055\235\001\002\000\006\047\053\051" +
    "\054\001\002\000\004\005\237\001\002\000\004\045\240" +
    "\001\002\000\016\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\053\uffc6\001\002\000\004\005\243\001\002\000\016" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\053\uffd8\001" +
    "\002\000\004\045\244\001\002\000\016\005\uffd6\006\uffd6" +
    "\007\uffd6\013\uffd6\030\uffd6\043\uffd6\001\002\000\004\044" +
    "\250\001\002\000\004\044\uffc2\001\002\000\004\044\uffc3" +
    "\001\002\000\004\044\251\001\002\000\006\011\151\012" +
    "\147\001\002\000\004\055\253\001\002\000\006\047\053" +
    "\051\054\001\002\000\004\005\255\001\002\000\004\045" +
    "\256\001\002\000\016\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\053\uffc7\001\002\000\012\031\174\032\172\033" +
    "\173\043\175\001\002\000\004\005\261\001\002\000\004" +
    "\045\262\001\002\000\016\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\053\uffc4\001\002\000\004\044\274\001\002" +
    "\000\004\044\265\001\002\000\004\044\266\001\002\000" +
    "\006\011\151\012\147\001\002\000\004\055\270\001\002" +
    "\000\036\014\034\015\047\016\037\017\044\020\043\021" +
    "\046\022\032\023\041\024\036\025\035\026\050\056\033" +
    "\057\042\060\031\001\002\000\004\005\272\001\002\000" +
    "\004\045\273\001\002\000\016\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\053\uffc8\001\002\000\006\011\151\012" +
    "\147\001\002\000\004\055\276\001\002\000\036\014\034" +
    "\015\047\016\037\017\044\020\043\021\046\022\032\023" +
    "\041\024\036\025\035\026\050\056\033\057\042\060\031" +
    "\001\002\000\004\005\uffc9\001\002\000\006\011\151\012" +
    "\147\001\002\000\004\044\302\001\002\000\004\044\303" +
    "\001\002\000\004\057\304\001\002\000\004\046\305\001" +
    "\002\000\036\014\034\015\047\016\037\017\044\020\043" +
    "\021\046\022\032\023\041\024\036\025\035\026\050\056" +
    "\033\057\042\060\031\001\002\000\004\005\307\001\002" +
    "\000\004\045\310\001\002\000\016\005\ufff6\006\ufff6\007" +
    "\ufff6\013\ufff6\030\ufff6\043\ufff6\001\002\000\014\034\203" +
    "\035\202\036\207\037\213\040\204\001\002\000\014\034" +
    "\313\035\202\036\207\037\213\040\204\001\002\000\006" +
    "\030\257\043\314\001\002\000\004\005\315\001\002\000" +
    "\004\045\316\001\002\000\004\053\317\001\002\000\004" +
    "\005\320\001\002\000\004\045\321\001\002\000\016\005" +
    "\uffd5\006\uffd5\007\uffd5\013\uffd5\030\uffd5\043\uffd5\001\002" +
    "\000\004\002\001\001\002\000\004\004\324\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\016" +
    "\005\017\006\013\011\010\013\007\016\011\021\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\175\001\001\000\016\005\166\006\013\011\010" +
    "\013\007\016\011\021\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\044\012\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\051\001" +
    "\001\000\002\001\001\000\006\010\056\015\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\056\015\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\064\001\001\000\002\001\001\000\004\010\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\044" +
    "\012\074\001\001\000\002\001\001\000\004\010\076\001" +
    "\001\000\002\001\001\000\004\010\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\103\001\001\000" +
    "\002\001\001\000\004\010\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\115\001\001\000\002\001\001\000\004\010" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\130\001\001\000\002\001\001\000\004\010" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\140\001\001\000\002\001\001\000\004\017\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\151\014\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\056\015\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\023\214\025\204\026\211" +
    "\027\213\030\200\031\205\032\207\033\177\034\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\263" +
    "\001\001\000\002\001\001\000\004\024\244\001\001\000" +
    "\022\023\241\026\211\027\213\030\200\031\205\032\207" +
    "\033\177\034\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\222\020\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\222\020\233\001\001" +
    "\000\002\001\001\000\004\017\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\222\020\251\001\001\000\002\001" +
    "\001\000\004\017\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\222\020\266\001\001\000\002\001\001\000\004\010\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\222\020\274\001\001\000\002\001\001" +
    "\000\004\010\276\001\001\000\002\001\001\000\006\007" +
    "\222\020\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\023\214\025\311\026\211\027\213\030\200\031" +
    "\205\032\207\033\177\034\210\001\001\000\022\023\241" +
    "\026\211\027\213\030\200\031\205\032\207\033\177\034" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        //es para las salidad de print y column en consola
        public ArrayList<String> salidas = new ArrayList<String>();
    //lista de errores
    public ArrayList<Exception_> Errores = new ArrayList();
    
    public ArrayList<TablaSimbolos> ts = new ArrayList();
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
    **/ 
    public void syntax_error(Symbol s){
        Errores.add(new Exception_("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    }

    public String variable = "";
    public Object valor = null;
    public String tipo = "";

        public void agregar(){
        ts.add(new TablaSimbolos(variable,valor,tipo));
        }
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
    **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocidoo."); 
    }

    public ArrayList<Exception_> getErrores(){
        return Errores;
        
    }

    public ArrayList<TablaSimbolos> getTs(){
        return ts;
    }
        //esto es para la grafica de Barras
        public String title = "";
        public ArrayList<Object> ejeX = new ArrayList<>();
        public ArrayList<Object> ejeY = new ArrayList<>();
        public String titleX = "";
        public String titleY = "";

        //esto es para la grafica de Pie
        public ArrayList<Object> values = new ArrayList<>();
        public ArrayList<Object> labels = new ArrayList<>();

        //esto es para la grafica de Line es igual que la de barras xD





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCTIONS ::= PROGRAM INSTRUCTION END PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= error END PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTION ::= INSTRUCTION SENTENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= SENTENCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCE ::= STATEMENT_VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCE ::= STATEMENT_PRINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE ::= ARREGLO_DECLARATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCE ::= PRINT_ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCE ::= FUNCTION_GRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT_VARIABLES ::= VAR DOSPUNTOS TYPE_VAR DOSPUNTOS DOSPUNTOS ID FLECHA EXPRESSION END PUNTOCOMA 
            {
              Object RESULT =null;
		int itentifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int itentifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String itentifier = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int value_left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int value_right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value_ = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      
                variable = itentifier.toString();
                valor = value_;
                agregar();
                Object value = null;
                if (value_ instanceof String) {
                    value = value_.toString(); // Convertir a cadena explícitamente
                } else {
                    value = value_; // Mantener el valor tal como está
                }
                Mapas.setVariable(itentifier.toString(), value);
                System.out.println("Variable declarada: " + itentifier + " con valor: " + value);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE_VAR ::= TYPE CORABRE CORCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_VAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE_VAR ::= TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_VAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPE ::= CHAR 
            {
              Object RESULT =null;
		
                System.out.println("Tipo de dato char");
                tipo = "char";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= DOUBLE 
            {
              Object RESULT =null;
		
                System.out.println("Tipo de dato double");
                tipo = "double";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESSION ::= DECIMAL 
            {
              Object RESULT =null;
		int decileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deci = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = deci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESSION ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Object auxMapa = null;
                auxMapa = Mapas.getVariable(id.toString()); 
                if (auxMapa != null) {
                        RESULT = auxMapa; 
                } else {
                        System.out.println("Variable no declarada");
                }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESSION ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cad; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESSION ::= SUMA PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Suma: " + operacion.suma(primero, segundo));
                RESULT = operacion.suma(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESSION ::= RESTA PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Resta: " + operacion.resta(primero, segundo));
                RESULT = operacion.resta(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESSION ::= MULTIPLICACION PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Multiplicación: " + operacion.multiplicacion(primero, segundo));
                RESULT = operacion.multiplicacion(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESSION ::= DIVISION PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("División: " + operacion.division(primero, segundo));
                RESULT = operacion.division(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESSION ::= MODULO PARABRE EXPRESSION COMA EXPRESSION PARCIERRA 
            {
              Object RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object primero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int segundoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int segundoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object segundo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesAritmeticas operacion = new OperacionesAritmeticas();
                System.out.println("Módulo: " + operacion.modulo(primero, segundo));
                RESULT = operacion.modulo(primero, segundo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESSION ::= MEDIA PARABRE TYPE_PRINT_ARRAY PARCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesEstadisticas operacion = new OperacionesEstadisticas();
                System.out.println("Media: " + operacion.media((ArrayList<Object>)list));
                RESULT = operacion.media((ArrayList<Object>)list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESSION ::= MEDIANA PARABRE TYPE_PRINT_ARRAY PARCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesEstadisticas operacion = new OperacionesEstadisticas();
                System.out.println("Mediana: " + operacion.mediana((ArrayList<Object>)list));
                RESULT = operacion.mediana((ArrayList<Object>)list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESSION ::= MODA PARABRE TYPE_PRINT_ARRAY PARCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesEstadisticas operacion = new OperacionesEstadisticas();
                System.out.println("Moda: " + operacion.moda((ArrayList<Object>)list));
                RESULT = operacion.moda((ArrayList<Object>)list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESSION ::= VARIANZA PARABRE TYPE_PRINT_ARRAY PARCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesEstadisticas operacion = new OperacionesEstadisticas();
                System.out.println("Varianza: " + operacion.varianza((ArrayList<Object>)list));
                RESULT = operacion.varianza((ArrayList<Object>)list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESSION ::= MAX PARABRE TYPE_PRINT_ARRAY PARCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesEstadisticas operacion = new OperacionesEstadisticas();
                System.out.println("Máximo: " + operacion.maximo((ArrayList<Object>)list));
                RESULT = operacion.maximo((ArrayList<Object>)list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESSION ::= MIN PARABRE TYPE_PRINT_ARRAY PARCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                OperacionesEstadisticas operacion = new OperacionesEstadisticas();
                System.out.println("Mínimo: " + operacion.minimo((ArrayList<Object>)list));
                RESULT = operacion.minimo((ArrayList<Object>)list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENT_PRINT ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL CONCATENATION END PUNTOCOMA 
            {
              Object RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object concat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                System.out.println("Imprimir: " + concat);
                salidas.add(concat.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_PRINT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONCATENATION ::= EXPRESSION COMA CONCATENATION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int concaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int concaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object conca = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = exp + ", " + conca;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONCATENATION ::= EXPRESSION 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCATENATION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARREGLO_DECLARATION ::= ARREGLO DOSPUNTOS ARREGLO_TYPE DOSPUNTOS DOSPUNTOS ARROBA ID FLECHA CORABRE LIST_VALUES CORCIERRA END PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                variable = id.toString();
                valor = list;
                agregar();
            Mapas.setArreglo(id.toString(),(ArrayList<Object>) list);
            System.out.println("Arreglo declarado: " + id + " con valores: " + list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO_DECLARATION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARREGLO_TYPE ::= TYPE CORABRE CORCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO_TYPE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARREGLO_TYPE ::= TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO_TYPE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LIST_VALUES ::= EXPRESSION COMA LIST_VALUES 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //con esto me aseguro que todo sea de tipo Objetct y no haya problema luego
            ArrayList<Object> newList = new ArrayList<>();
            newList.addAll((ArrayList<Object>)list); // Copiamos la lista actual
            newList.add(expr); // Agregamos el nuevo elemento
            RESULT = newList; // Asignamos la nueva lista como resultado
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VALUES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LIST_VALUES ::= EXPRESSION 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<Object> newList = new ArrayList<>();
            newList.add(exp); // Creamos una nueva lista con el único elemento
            RESULT = newList; // Asignamos la nueva lista como resultado
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VALUES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINT_ARRAY ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL EXPRESSION FLECHA TYPE_PRINT_ARRAY END PUNTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        // Convertimos el resultado de TYPE_PRINT_ARRAY a una lista
                ArrayList<Object> lista = (ArrayList<Object>)list;
                String guiones = "-";
                System.out.println(guiones.repeat(20));
                System.out.println(exp.toString());
                System.out.println(guiones.repeat(20));
                salidas.add(guiones.repeat(50));
                salidas.add(exp.toString());
                salidas.add(guiones.repeat(50));
                // Iteramos sobre la lista y la imprimimos
                for (Object obj : lista) {
                System.out.println(obj);
                salidas.add(obj.toString());
                }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT_ARRAY",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE_PRINT_ARRAY ::= ARROBA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Recuperamos el arreglo del HashMap usando el id
                ArrayList<Object> list = Mapas.getArreglo(id);
                RESULT = list; // Asignamos el arreglo como resultado
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_PRINT_ARRAY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE_PRINT_ARRAY ::= CORABRE LIST_VALUES CORCIERRA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                ArrayList<Object> lista = (ArrayList<Object>)list;
                RESULT = lista; // Asignamos la lista como resultado
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_PRINT_ARRAY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCTION_GRAPH ::= INSTRUCTION_GRAPH EXPRESSSION_GRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_GRAPH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCTION_GRAPH ::= EXPRESSSION_GRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_GRAPH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCTION_GRAPH ::= GRAPH TYPE_GRAPH PARABRE INSTRUCTION_GRAPH PARCIERRA END PUNTOCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                System.out.println("Estoy en grafica "+tipo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_GRAPH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCTION_GRAPH ::= HISTOGRAM PARABRE INSTRUCTION_GRAPH EXEC HISTOGRAM END PUNTOCOMA PARCIERRA END PUNTOCOMA 
            {
              Object RESULT =null;
		
                System.out.println("Estoy en grafica de histograma");
                Graficas.generarHistograma(title, values);
                salidas.add("Grafica de histograma generada con exito");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_GRAPH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE_GRAPH ::= PRBAR 
            {
              Object RESULT =null;
		 String var = "BARRAS";
                System.out.println("Grafica de barras");
            RESULT = var;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_GRAPH",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE_GRAPH ::= PRPIE 
            {
              Object RESULT =null;
		 String var = "PIE";
                System.out.println("Grafica de pie");
            RESULT = var;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_GRAPH",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE_GRAPH ::= PRLINE 
            {
              Object RESULT =null;
		 String var = "LINEA";
                System.out.println("Grafica de lineas");
            RESULT = var;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_GRAPH",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPE_GRAPH ::= HISTOGRAM 
            {
              Object RESULT =null;
		 String var = "HISTOGRAMA";
                System.out.println("Grafica de histograma");
            RESULT = var;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_GRAPH",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESSSION_GRAPH ::= TITULO_PRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSSION_GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESSSION_GRAPH ::= TITULO_EJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSSION_GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESSSION_GRAPH ::= EJEES_VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSSION_GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSSION_GRAPH ::= LABELS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSSION_GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSSION_GRAPH ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSSION_GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSSION_GRAPH ::= EXEC_GRAPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSSION_GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TITULO_PRINCIPAL ::= TITULO_PRINCIPAL_RULE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO_PRINCIPAL",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TITULO_PRINCIPAL_RULE ::= TITULO DOSPUNTOS DOSPUNTOS TYPE_VAR IGUAL EXPRESSION 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("Titulo principal: "+titulo);
        title = String.valueOf(titulo);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO_PRINCIPAL_RULE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TITULO_EJE ::= TITULO TYPE_EJE DOSPUNTOS DOSPUNTOS TYPE_VAR IGUAL EXPRESSION END PUNTOCOMA 
            {
              Object RESULT =null;
		int tipoEjeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tipoEjeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipoEje = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  tipo = String.valueOf(tipoEje);
        System.out.println("Titulo: " + tipo+" es: "+titulo);
        if (tipo.equals("X")) {
            titleX = String.valueOf(titulo);
        } else if (tipo.equals("Y")){
            titleY = String.valueOf(titulo);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO_EJE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EJEES_VALORES ::= EJE TYPE_EJE DOSPUNTOS DOSPUNTOS TYPE_VAR IGUAL TYPE_PRINT_ARRAY END PUNTOCOMA 
            {
              Object RESULT =null;
		int tipoEjeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tipoEjeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipoEje = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        tipo = String.valueOf(tipoEje);
        System.out.println("Eje: " + tipo+" es: "+list);
        // Limpia las listas antes de agregar nuevos valores
        if (tipo.equals("X")) {
                ejeX.clear();
        } else if (tipo.equals("Y")) {
                ejeY.clear();
        }

        // Agrega los nuevos valores a las listas correspondientes
        ArrayList<Object> lista = (ArrayList<Object>) list;
        if (tipo.equals("X")) {
                ejeX.addAll(lista);
        } else if (tipo.equals("Y")) {
                ejeY.addAll(lista);
        }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJEES_VALORES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LABELS ::= LABEL DOSPUNTOS DOSPUNTOS TYPE_VAR IGUAL TYPE_PRINT_ARRAY END PUNTOCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        labels.clear();
        ArrayList<Object> lista = (ArrayList<Object>)list;
        labels.addAll(lista);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LABELS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALORES ::= VALUES DOSPUNTOS DOSPUNTOS TYPE_VAR IGUAL TYPE_PRINT_ARRAY END PUNTOCOMA 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        values.clear();
        ArrayList<Object> lista = (ArrayList<Object>)list;
        values.addAll(lista);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXEC_GRAPH ::= EXEC GRAPH TYPE_GRAPH END PUNTOCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        System.out.println("Estoy en grafica Grafica de tipo: " + tipo);
        tipo = tipo.toString();

        if (tipo.equals("BARRAS")) {
            System.out.println("Grafica de barras");
            Graficas.agregarGraficaDeBarras(title, ejeX, ejeY, titleX, titleY);
            salidas.add("Grafica de barras generada con exito");
        } else if (tipo.equals("PIE")){
            System.out.println("Grafica de pie");
            Graficas.agregarGraficaDePie(title,values, labels);
            salidas.add("Grafica de pie generada con exito");

        } else if (tipo.equals("LINEA")){
            System.out.println("Grafica de linea");
            Graficas.agregarGraficaDeLineas(title, ejeX, ejeY, titleX, titleY);
            salidas.add("Grafica de lineal generada con exito");

        } else if (tipo.equals("HISTOGRAMA")){
            System.out.println("Grafica de histograma");
            
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEC_GRAPH",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TYPE_EJE ::= PRX 
            {
              Object RESULT =null;
		int varXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = varX; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_EJE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TYPE_EJE ::= PRY 
            {
              Object RESULT =null;
		int varYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varYright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = varY;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE_EJE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
